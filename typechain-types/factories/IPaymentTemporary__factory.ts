/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type {
  IPaymentTemporary,
  IPaymentTemporaryInterface,
} from "../IPaymentTemporary";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32[]",
            name: "merkleProof",
            type: "bytes32[]",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "attestationType",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "sourceId",
                type: "bytes32",
              },
              {
                internalType: "uint64",
                name: "votingRound",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "lowestUsedTimestamp",
                type: "uint64",
              },
              {
                components: [
                  {
                    internalType: "bytes32",
                    name: "transactionId",
                    type: "bytes32",
                  },
                  {
                    internalType: "uint256",
                    name: "inUtxo",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "utxo",
                    type: "uint256",
                  },
                ],
                internalType: "struct IPayment.RequestBody",
                name: "requestBody",
                type: "tuple",
              },
              {
                components: [
                  {
                    internalType: "uint64",
                    name: "blockNumber",
                    type: "uint64",
                  },
                  {
                    internalType: "uint64",
                    name: "blockTimestamp",
                    type: "uint64",
                  },
                  {
                    internalType: "bytes32",
                    name: "sourceAddressHash",
                    type: "bytes32",
                  },
                  {
                    internalType: "bytes32",
                    name: "receivingAddressHash",
                    type: "bytes32",
                  },
                  {
                    internalType: "bytes32",
                    name: "intendedReceivingAddressHash",
                    type: "bytes32",
                  },
                  {
                    internalType: "int256",
                    name: "spentAmount",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "intendedSpentAmount",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "receivedAmount",
                    type: "int256",
                  },
                  {
                    internalType: "int256",
                    name: "intendedReceivedAmount",
                    type: "int256",
                  },
                  {
                    internalType: "bytes32",
                    name: "standardPaymentReference",
                    type: "bytes32",
                  },
                  {
                    internalType: "bool",
                    name: "oneToOne",
                    type: "bool",
                  },
                  {
                    internalType: "uint8",
                    name: "status",
                    type: "uint8",
                  },
                ],
                internalType: "struct IPayment.ResponseBody",
                name: "responseBody",
                type: "tuple",
              },
            ],
            internalType: "struct IPayment.Response",
            name: "data",
            type: "tuple",
          },
        ],
        internalType: "struct IPayment.Proof",
        name: "_proof",
        type: "tuple",
      },
    ],
    name: "proof",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "attestationType",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "sourceId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "messageIntegrityCode",
            type: "bytes32",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "transactionId",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "inUtxo",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "utxo",
                type: "uint256",
              },
            ],
            internalType: "struct IPayment.RequestBody",
            name: "requestBody",
            type: "tuple",
          },
        ],
        internalType: "struct IPayment.Request",
        name: "_request",
        type: "tuple",
      },
    ],
    name: "request",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "attestationType",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "sourceId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "votingRound",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "lowestUsedTimestamp",
            type: "uint64",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "transactionId",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "inUtxo",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "utxo",
                type: "uint256",
              },
            ],
            internalType: "struct IPayment.RequestBody",
            name: "requestBody",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint64",
                name: "blockNumber",
                type: "uint64",
              },
              {
                internalType: "uint64",
                name: "blockTimestamp",
                type: "uint64",
              },
              {
                internalType: "bytes32",
                name: "sourceAddressHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "receivingAddressHash",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "intendedReceivingAddressHash",
                type: "bytes32",
              },
              {
                internalType: "int256",
                name: "spentAmount",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "intendedSpentAmount",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "receivedAmount",
                type: "int256",
              },
              {
                internalType: "int256",
                name: "intendedReceivedAmount",
                type: "int256",
              },
              {
                internalType: "bytes32",
                name: "standardPaymentReference",
                type: "bytes32",
              },
              {
                internalType: "bool",
                name: "oneToOne",
                type: "bool",
              },
              {
                internalType: "uint8",
                name: "status",
                type: "uint8",
              },
            ],
            internalType: "struct IPayment.ResponseBody",
            name: "responseBody",
            type: "tuple",
          },
        ],
        internalType: "struct IPayment.Response",
        name: "_response",
        type: "tuple",
      },
    ],
    name: "response",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610106806100206000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063611e9d1e14604157806368ed074a14605157806388a9e07114605c575b600080fd5b604f604c3660046067565b50565b005b604f604c366004607f565b604f604c3660046090565b60006102608284031215607957600080fd5b50919050565b600060c08284031215607957600080fd5b60006020828403121560a157600080fd5b813567ffffffffffffffff81111560b757600080fd5b8201610280818503121560c957600080fd5b939250505056fea26469706673582212205c1e4ab470fd233a39d5e715db7281e4e52b6430aa44f30325ea3311a1928a8a64736f6c63430008140033";

type IPaymentTemporaryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IPaymentTemporaryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IPaymentTemporary__factory extends ContractFactory {
  constructor(...args: IPaymentTemporaryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      IPaymentTemporary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): IPaymentTemporary__factory {
    return super.connect(runner) as IPaymentTemporary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IPaymentTemporaryInterface {
    return new Interface(_abi) as IPaymentTemporaryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPaymentTemporary {
    return new Contract(address, _abi, runner) as unknown as IPaymentTemporary;
  }
}
